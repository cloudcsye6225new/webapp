name: Ami_Test_Creation

on:
  push:
    branches: ["main"]

jobs:
  build:
    name: pr-check
    runs-on: ubuntu-latest

    env:
      PGHOST: ${{ secrets.PGHOST }}
      PGPORT: ${{ secrets.PGPORT }}
      PGUSER: postgres
      PGPASSWORD: ${{ secrets.PGPASSWORD }}
      PGDATABASE: ${{ secrets.PGDATABASE }}
      TEST_DATABASE: ${{ secrets.TEST_DATABASE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql postgresql-contrib
      - name: Start PostgreSQL service
        run: sudo service postgresql start

      - name: Wait for PostgreSQL to start
        run: |
          timeout 5 bash -c '
            until sudo -u postgres psql -c "\\l" &>/dev/null; do
             sleep 1
           done
          '
      - name: Check PostgreSQL status
        run: sudo service postgresql status

      - name: Create PostgreSQL user and database
        run: |
          echo "ALTER USER postgres WITH ENCRYPTED PASSWORD '${{ secrets.PGPASSWORD }}';" | sudo -u postgres psql
      - name: Create PostgreSQL database
        run: |
          psql -h localhost -U postgres -d postgres -c "CREATE DATABASE ${{ secrets.PGDATABASE }};"
          psql -h localhost -U postgres -d postgres -c "CREATE DATABASE ${{ secrets.TEST_DATABASE }};"
      - name: List PostgreSQL databases
        run: |
          psql -h localhost -U postgres -l
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x" # Replace with your desired Python version

      - name: changing directory
        run: |
          pwd
          ls
          cd App_Test
          ls
          pip install -r requirements.txt

      - name: install psycopg2
        run: |
          sudo apt install libpq-dev
          pip install psycopg2-binary
          # Install uvicorn
          pip install uvicorn

      - name: Run FastAPI application
        run: |
          pwd
          cd App_Test
          uvicorn main:app --host 0.0.0.0 --port 8000 --reload &

      - name: Wait for FastAPI to start
        run: |
          cd App_Test
          pytest

      - name: Create .env file
        run: |
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "PGDATABASE=${{ secrets.PGDATABASE }}" >> .env
          echo "PGHOST=${{ secrets.PGHOST }}" >> .env
          echo "PGPASSWORD=${{ secrets.PGPASSWORD }}" >> .env
          echo "PGPORT=${{ secrets.PGPORT }}" >> .env
          echo "TEST_DATABASE=${{ secrets.TEST_DATABASE }}" >> .env

      - name: List Files
        run: ls -al

      - name: Create Zip File
        run: |
          zip -r webapp.zip .

      - name: Upload Zip File
        uses: actions/upload-artifact@v3
        with:
          name: webapp zip creation
          path: webapp.zip
          
      - name: Moving Zip to APP_TEST
        run: |
          ls
          pwd
          sudo mv /home/runner/work/webapp/webapp/webapp.zip /home/runner/work/webapp/webapp/App_Test/
          

      - name: Run Packer
        run: |
          # Install Packer
          curl -fsSL https://releases.hashicorp.com/packer/1.7.3/packer_1.7.3_linux_amd64.zip -o packer.zip
          unzip packer.zip
          sudo mv packer /usr/local/bin/
          ls
          pwd
          cd App_Test
          packer init packer-webapp.pkr.hcl

          packer build -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
             -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
             -var "aws_region=${{ secrets.AWS_REGION }}" \
             -var "ami_name_prefix=${{ secrets.AMI_NAME_PREFIX }}" \
             -var "source_ami=${{ secrets.SOURCE_AMI }}" \
             -var "instance_type=${{ secrets.INSTANCE_TYPE }}" \
             -var "ssh_username=${{ secrets.SSH_USERNAME }}" \
             packer-webapp.pkr.hcl
